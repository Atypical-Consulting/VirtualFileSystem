<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <DefaultDocumentationFolder>../../docs/api</DefaultDocumentationFolder>
        <DefaultDocumentationLinksOutputFile>../../docs/links</DefaultDocumentationLinksOutputFile>
        <DefaultDocumentationAssemblyPageName>VirtualFileSystem</DefaultDocumentationAssemblyPageName>
    </PropertyGroup>

    <!-- File inclusion -->
    <ItemGroup>
        <None Include="../../Logo.png" Pack="true" PackagePath="" />
        <None Include="../../LICENSE" Pack="true" PackagePath="" />
        <None Include="../../README.md" Pack="true" PackagePath="" />
    </ItemGroup>
    
    <!-- Development dependencies -->
    <ItemGroup>
      <PackageReference Include="DefaultDocumentation" Version="0.8.2">
        <PrivateAssets>all</PrivateAssets>
        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      </PackageReference>
      <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="9.0.0" />
    </ItemGroup>

    <!-- NuGet metadata -->
    <PropertyGroup>
      <PackageId>Atypical.VirtualFileSystem</PackageId>
      <PackageIcon>Logo.png</PackageIcon>
      <PackageLicenseFile>LICENSE</PackageLicenseFile>
      <PackageReadmeFile>README.md</PackageReadmeFile>
      <Authors>Philippe Matray</Authors>
      <Company>Atypical Consulting SRL</Company>
      <Product>Virtual File System</Product>
      <Description>
        A virtual file system implementation in modern C#.
        When writing applications in .NET, you often need to write or read the contents of a file. .NET provides `System.IO` namespace dedicated to this purpose. But how do we deal with the filesystem when testing our code?
        "Virtual File System" is an attempt to solve this problem. Currently, this library is at an early stage of development. If you need additional functionality, I invite you to open an issue to discuss it.
      </Description>
      <PackageTags>virtual filesystem;testing;core;net8</PackageTags>
      <Copyright>Copyright (c) 2022-2023 Atypical Consulting SRL</Copyright>
      <PackageProjectUrl>https://github.com/Atypical-Consulting/VirtualFileSystem</PackageProjectUrl>
      <RepositoryUrl>https://github.com/Atypical-Consulting/VirtualFileSystem.git</RepositoryUrl>
      <RepositoryType>git</RepositoryType>
      <RepositoryBranch>main</RepositoryBranch>
      <PackageReleaseNotes>
        ## Changes

        - build(deps): bump JetBrains/qodana-action from 2023.2 to 2023.3 @dependabot (#85)
        - build(deps): bump actions/setup-dotnet from 3 to 4 @dependabot (#83)
        - build(deps): bump release-drafter/release-drafter from 5 to 6 @dependabot (#84)
        - build(deps): bump actions/checkout from 3 to 4 @dependabot (#86)
        - build(deps): bump actions/cache from 3 to 4 @dependabot (#87)
        - Features/undo redo @phmatray (#82)
        - upgrade dependencies @phmatray (#80)
        - build(deps): bump Spectre.Console from 0.47.0 to 0.48.0 @dependabot (#70)
      </PackageReleaseNotes>
      <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
      <PackageLanguage>en-US</PackageLanguage>
    </PropertyGroup>

</Project>
